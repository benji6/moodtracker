import os
import re
from troposphere import Ref, Template, GetAtt, Sub
import troposphere.sns as sns
import troposphere.ses as ses
import troposphere.location as location
from modules import lambda_endpoint, lambda_role, lambda_permission
from constants import INFRA_DIR
from http_api import http_api

output = "# N.B. This file is automatically generated\n\n"

with open(os.path.join(INFRA_DIR, "cloudformation.template.yml"), "r") as template_file:
    for template_line in template_file.readlines():
        m = re.match("^(.*){{{(.*)}}}", template_line)

        if not m:
            output += template_line
            continue

        prefix = m.group(1)
        import_file_path = m.group(2)

        with open(os.path.join(INFRA_DIR, import_file_path)) as import_file:
            for import_line in import_file.readlines():
                output += f"{prefix}{import_line}"


t = Template()

lambda_permission(
    t,
    "LambdaWeeklyEmailsSendEventBusPermission",
    GetAtt("LambdaWeeklyEmailsSend", "Arn"),
    "events.amazonaws.com",
    GetAtt("EventBusWeeklyEmailsRule", "Arn"),
)
lambda_role(
    t,
    "LambdaWeeklyEmailsRole",
    "moodtracker_lambda_emails_send_policy",
    [
        {
            "Action": "cognito-idp:ListUsers",
            "Effect": "Allow",
            "Resource": GetAtt("CognitoUserPool", "Arn"),
        },
        {
            "Action": "dynamodb:Scan",
            "Effect": "Allow",
            "Resource": GetAtt("DynamoWeeklyEmailsTable", "Arn"),
        },
        {
            "Action": "ses:SendEmail",
            "Effect": "Allow",
            "Resource": Ref("SesNoreplyArn"),
        },
    ],
)

http_api(t)

t.add_resource(
    location.PlaceIndex(
        "LocationPlaceIndex",
        DataSource="Esri",
        Description="String",
        IndexName="MoodTrackerPlaceIndex",
    ),
)

t.add_resource(
    ses.ReceiptRule(
        "SesReceiptRule",
        Rule=ses.Rule(
            Actions=[
                ses.Action(SNSAction=ses.SNSAction(TopicArn=Ref("SnsTopicEmails")))
            ],
            Enabled=True,
            Name="moodtracker.link-emails-to-sns",
            Recipients=["noreply@moodtracker.link"],
            ScanEnabled=True,
        ),
        RuleSetName="default-rule-set",
    )
)

t.add_resource(
    sns.Topic(
        "SnsTopicEmails",
        Metadata={
            "checkov": {
                "skip": [
                    {
                        "comment": "Encryption at rest is not deemed as necessary for this queue as it is for a noreply address and should not receive any email",
                        "id": "CKV_AWS_26",
                    }
                ]
            }
        },
        Subscription=[
            sns.Subscription(
                Endpoint="{{resolve:secretsmanager:MoodTrackerSecrets:SecretString:SnsEmailAddress}}",
                Protocol="EMAIL",
            )
        ],
        TopicName="moodtracker-emails",
    )
)

output += t.to_yaml().split("\n", 1)[1]

with open(os.path.join(INFRA_DIR, "cloudformation.yml"), "w") as file:
    file.write(output)
