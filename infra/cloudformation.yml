AWSTemplateFormatVersion: 2010-09-09
Outputs:
  ApiGatewayDeployCommand:
    Value: !Sub "aws apigateway create-deployment --rest-api-id ${ApiGateway} --stage-name prod | cat"
  ApiGatewayUrl:
    Value: !Sub "https://${ApiGateway}.execute-api.us-east-1.amazonaws.com/prod"
  CognitoClientId:
    Value: !Ref CognitoUserPoolClient
  CognitoUserPoolId:
    Value: !Ref CognitoUserPool
Parameters:
  SnsEmailAddress:
    Description: This is an email address for SNS to forward to
    NoEcho: true
    Type: String
Resources:
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: MoodTrackerApi
  ApiGatewayAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      IdentitySource: method.request.header.Authorization
      Name: CognitoUserPoolAuthorizer
      ProviderARNs:
        - !GetAtt CognitoUserPool.Arn
      RestApiId: !Ref ApiGateway
      Type: COGNITO_USER_POOLS
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiGatewayEventsGet
      - ApiGatewayEventsOptions
      - ApiGatewayEventsPost
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: prod
  ApiGatewayEventsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: events
      RestApiId: !Ref ApiGateway
  ApiGatewayEventsOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'http://localhost:1234'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
      ResourceId: !Ref ApiGatewayEventsResource
      RestApiId: !Ref ApiGateway
  ApiGatewayEventsGet:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiGatewayAuthorizer
      HttpMethod: GET
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaEventsGet.Arn}/invocations"
      ResourceId: !Ref ApiGatewayEventsResource
      RestApiId: !Ref ApiGateway
  ApiGatewayEventsPost:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiGatewayAuthorizer
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaEventsPost.Arn}/invocations"
      ResourceId: !Ref ApiGatewayEventsResource
      RestApiId: !Ref ApiGateway
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      AutoVerifiedAttributes:
        - email
      EmailConfiguration:
        EmailSendingAccount: DEVELOPER
        From: noreply@moodtracker.link
        SourceArn: arn:aws:ses:us-east-1:315965384508:identity/noreply@moodtracker.link
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: true
      UsernameAttributes:
        - email
      UsernameConfiguration:
        CaseSensitive: false
      UserPoolName: moodtracker
      VerificationMessageTemplate:
        DefaultEmailOption: CONFIRM_WITH_LINK
        EmailMessageByLink: "{##Follow this link##} to complete your signup with MoodTracker"
        EmailSubjectByLink: MoodTracker email verification
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      PreventUserExistenceErrors: ENABLED
      RefreshTokenValidity: 365 # max value in days
      UserPoolId: !Ref CognitoUserPool
  CognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: moodtracker
      UserPoolId: !Ref CognitoUserPool
  DynamoEventsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: createdAt
          AttributeType: S
        - AttributeName: serverCreatedAt
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: createdAt
          KeyType: RANGE
      LocalSecondaryIndexes:
        - IndexName: serverCreatedAt
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: serverCreatedAt
              KeyType: RANGE
          Projection:
            ProjectionType: "ALL"
      TableName: moodtracker_events
  LambdaEventsGet:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import json
          import operator
          from boto3.dynamodb.conditions import Attr, Key
          from datetime import datetime, timedelta
          headers = {
            'Access-Control-Allow-Origin': 'http://localhost:1234',
            'Content-Type': 'application/json',
          }
          dynamodb = boto3.resource('dynamodb')
          table = dynamodb.Table('moodtracker_events')
          expression_attribute_names = {'#t': 'type'}
          projection_expression='createdAt,payload,serverCreatedAt,#t'
          def handler(event, context):
            user_id = event['requestContext']['authorizer']['claims']['sub']
            try:
              if event['queryStringParameters'] and event['queryStringParameters']['cursor']:
                try:
                  cursor_date = datetime.fromisoformat(event['queryStringParameters']['cursor'])
                except ValueError as e:
                  print(e)
                  return {
                    'body': json.dumps({'error': 'Invalid "cursor" query string parameter'}),
                    'headers': headers,
                    'statusCode': 400,
                  }
                # protect against pathological clock skew
                cursor_date_str = (cursor_date - timedelta(minutes=30)).isoformat()
                response = table.query(
                  ExpressionAttributeNames=expression_attribute_names,
                  IndexName='serverCreatedAt',
                  KeyConditionExpression=Key('userId').eq(user_id) & Key('serverCreatedAt').gt(cursor_date_str),
                  ProjectionExpression=projection_expression,
                )
                response['Items'].sort(key=operator.itemgetter('serverCreatedAt'))
              else:
                response = table.query(
                  ExpressionAttributeNames=expression_attribute_names,
                  KeyConditionExpression=Key('userId').eq(user_id),
                  ProjectionExpression=projection_expression,
                )
              events = response['Items']
              last_server_created_at = None
              for event in events:
                if last_server_created_at == None:
                  last_server_created_at = event['serverCreatedAt']
                elif last_server_created_at < event['serverCreatedAt']:
                  last_server_created_at = event['serverCreatedAt']
                del event['serverCreatedAt']
                payload = event['payload']
                if 'mood' in payload:
                  payload['mood'] = float(payload['mood'])
              return {
                'body': json.dumps({'events': events, 'nextCursor': last_server_created_at}),
                'headers': headers,
                'statusCode': 200,
              }
            except Exception as e:
              print(e)
              return {
                'body': json.dumps({'error': 'Internal server error'}),
                'headers': headers,
                'statusCode': 500,
              }
      FunctionName: MoodTrackerEventsGet
      Handler: index.handler
      Role: !GetAtt LambdaEventsGetRole.Arn
      Runtime: python3.7
  LambdaEventsGetPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaEventsGet.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*"
  LambdaEventsGetRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: moodtracker_lambda_events_get_policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action: dynamodb:Query
                Effect: Allow
                Resource:
                  - !GetAtt DynamoEventsTable.Arn
                  - !Sub "${DynamoEventsTable.Arn}/index/serverCreatedAt"
  LambdaEventsPost:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import json
          from datetime import datetime
          dynamodb = boto3.resource('dynamodb')
          table = dynamodb.Table('moodtracker_events')
          def handler(event, context):
            user_id = event['requestContext']['authorizer']['claims']['sub']
            headers = {
              'Access-Control-Allow-Origin': 'http://localhost:1234',
              'Content-Type': 'application/json',
            }
            try:
              events = json.loads(event['body'])
            except json.JSONDecodeError as e:
              print(e)
              return {
                'body': json.dumps({'error': 'Malformed request body'}),
                'headers': headers,
                'statusCode': 400,
              }
            try:
              with table.batch_writer() as batch:
                for event in events:
                  event['serverCreatedAt'] = datetime.now().isoformat()
                  event['userId'] = user_id
                  batch.put_item(Item=event)
              del headers['Content-Type']
              return {'headers': headers, 'statusCode': 204}
            except Exception as e:
              print(e)
              return {
                'body': json.dumps({'error': 'Internal server error'}),
                'headers': headers,
                'statusCode': 500,
              }
      FunctionName: MoodTrackerEventsPost
      Handler: index.handler
      Role: !GetAtt LambdaEventsPostRole.Arn
      Runtime: python3.7
  LambdaEventsPostPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaEventsPost.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*"
  LambdaEventsPostRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: moodtracker_lambda_events_post_policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action: dynamodb:BatchWriteItem
                Effect: Allow
                Resource: !GetAtt DynamoEventsTable.Arn
  SesReceiptRule:
    Type: "AWS::SES::ReceiptRule"
    Properties:
      Rule:
        Actions:
          - SNSAction:
              TopicArn: !Ref SnsTopicEmails
        Enabled: true
        Name: moodtracker.link-emails-to-sns
        Recipients:
          - noreply@moodtracker.link
        ScanEnabled: true
      RuleSetName: default-rule-set
  SnsTopicEmails:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: !Ref SnsEmailAddress
          Protocol: EMAIL
      TopicName: moodtracker-emails
