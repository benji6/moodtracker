AWSTemplateFormatVersion: 2010-09-09
Outputs:
  ApiGatewayDeployCommand:
    Value: !Sub "aws apigateway create-deployment --rest-api-id ${ApiGateway} --stage-name prod | cat"
  ApiGatewayUrl:
    Value: !Sub "https://${ApiGateway}.execute-api.us-east-1.amazonaws.com/prod"
  CognitoClientId:
    Value: !Ref CognitoUserPoolClient
  CognitoUserPoolId:
    Value: !Ref CognitoUserPool
  CognitoIdentityPoolId:
    Value: !Ref CognitoIdentityPool
Parameters:
  ApiReservedConcurrentExecutions:
    Default: 10
    Description: This is used as the default value for most lambdas and is based on the number of active users. Some lambdas have different limits because their usage patterns are different
    NoEcho: true
    Type: Number
  SesNoreplyArn:
    Default: arn:aws:ses:us-east-1:315965384508:identity/noreply@moodtracker.link
    Description: ARN for the MoodTracker noreply email address
    NoEcho: true
    Type: String
Resources:
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: MoodTrackerApi
  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt ApiGatewayCloudWatchRole.Arn
  ApiGatewayAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      IdentitySource: method.request.header.Authorization
      Name: CognitoUserPoolAuthorizer
      ProviderARNs:
        - !GetAtt CognitoUserPool.Arn
      RestApiId: !Ref ApiGateway
      Type: COGNITO_USER_POOLS
  ApiGatewayCloudWatchRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiGatewayEventsGet
      - ApiGatewayEventsPost
      - ApiGatewayUsageGet
      - ApiGatewayWeatherGet
      - ApiGatewayWeeklyEmailsDelete
      - ApiGatewayWeeklyEmailsGet
      - ApiGatewayWeeklyEmailsPost
    Properties:
      RestApiId: !Ref ApiGateway
      StageDescription:
        DataTraceEnabled: true
        LoggingLevel: ERROR
        ThrottlingBurstLimit: 4096
        ThrottlingRateLimit: 2
      StageName: prod
  ApiGatewayEventsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: events
      RestApiId: !Ref ApiGateway
  ApiGatewayUsageResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: usage
      RestApiId: !Ref ApiGateway
  ApiGatewayWeatherResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: weather
      RestApiId: !Ref ApiGateway
  ApiGatewayWeeklyEmailsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: weekly-emails
      RestApiId: !Ref ApiGateway
  CloudFormationS3Bucket:
    # checkov:skip=CKV_AWS_18:Adds unnecessary complexity and objects stored in this bucket are not sensistive (they are derived from this open source template)
    # checkov:skip=CKV_AWS_21:Unnecessary because template is stored in version control and S3 object can be rebuilt trivially
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      BucketName: moodtracker-cloudformation
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  CognitoIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref CognitoUserPoolClient
          ProviderName: !GetAtt CognitoUserPool.ProviderName
          ServerSideTokenCheck: true
      IdentityPoolName: moodtracker
  CognitoIdentityPoolRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud: !Ref CognitoIdentityPool
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr: authenticated
            Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
      Policies:
        - PolicyName: moodtracker_idp_places_policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - geo:SearchPlaceIndexForPosition
                Effect: Allow
                Resource: !GetAtt LocationPlaceIndex.Arn
  CognitoIdentityPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref CognitoIdentityPool
      Roles:
        authenticated: !GetAtt CognitoIdentityPoolRole.Arn
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      AutoVerifiedAttributes:
        - email
      EmailConfiguration:
        EmailSendingAccount: DEVELOPER
        From: noreply@moodtracker.link
        SourceArn: !Ref SesNoreplyArn
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: true
      UserAttributeUpdateSettings:
        AttributesRequireVerificationBeforeUpdate:
          - email
      UsernameAttributes:
        - email
      UsernameConfiguration:
        CaseSensitive: false
      UserPoolName: moodtracker
      VerificationMessageTemplate:
        DefaultEmailOption: CONFIRM_WITH_LINK
        EmailMessageByLink: |
          Welcome to MoodTracker! You're almost signed up, just {##follow this link to verify your email address##}, then go back to the app and sign in!
        EmailSubjectByLink: MoodTracker email verification
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      PreventUserExistenceErrors: ENABLED
      RefreshTokenValidity: 365 # max value in days
      UserPoolId: !Ref CognitoUserPool
  CognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: moodtracker
      UserPoolId: !Ref CognitoUserPool
  DynamoEventsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: createdAt
          AttributeType: S
        - AttributeName: serverCreatedAt
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: createdAt
          KeyType: RANGE
      LocalSecondaryIndexes:
        - IndexName: serverCreatedAt
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: serverCreatedAt
              KeyType: RANGE
          Projection:
            ProjectionType: "ALL"
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      TableName: moodtracker_events
  DynamoGlobalCacheTable:
    # checkov:skip=CKV_AWS_28:This table is used as a simple cache so backup and recovery is unnecessary
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: key
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: key
          KeyType: HASH
      TableName: moodtracker_global_cache
      TimeToLiveSpecification:
        AttributeName: expiresAt
        Enabled: true
  DynamoWeatherTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: coordinates
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: N
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: coordinates
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      TableName: moodtracker_weather
  # Records all users that have signed up to weekly emails
  DynamoWeeklyEmailsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      TableName: moodtracker_weekly_emails
  EventBusWeeklyEmailsRule:
    Type: AWS::Events::Rule
    Properties:
      Name: EventBusWeeklyEmails
      Description: Rule to trigger MoodTracker weekly emails
      ScheduleExpression: cron(0 9 ? * MON *)
      Targets:
        - Arn: !GetAtt LambdaWeeklyEmailsSend.Arn
          Id: LambdaWeeklyEmailsSend
  LambdaWeeklyEmailsSend:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          {{{weekly_emails_send.lambda.py}}}
      FunctionName: MoodTrackerWeeklyEmailsSend
      Handler: index.handler
      ReservedConcurrentExecutions: 1
      Role: !GetAtt LambdaWeeklyEmailsRole.Arn
      Runtime: python3.10
      Timeout: 5
