AWSTemplateFormatVersion: 2010-09-09
Outputs:
  ApiGatewayDeployCommand:
    Value: !Sub "aws apigateway create-deployment --rest-api-id ${ApiGateway} --stage-name prod | cat"
  ApiGatewayUrl:
    Value: !Sub "https://${ApiGateway}.execute-api.us-east-1.amazonaws.com/prod"
  CognitoClientId:
    Value: !Ref CognitoUserPoolClient
  CognitoUserPoolId:
    Value: !Ref CognitoUserPool
Parameters:
  ApiReservedConcurrentExecutions:
    Default: 10
    Description: ReservedConcurrentExecutions is shared across all API lambdas (other lambdas may have their own values) and based on number of users
    NoEcho: true
    Type: Number
  SesNoreplyArn:
    Default: arn:aws:ses:us-east-1:315965384508:identity/noreply@moodtracker.link
    Description: ARN for the MoodTracker noreply email address
    NoEcho: true
    Type: String
Resources:
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: MoodTrackerApi
  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt ApiGatewayCloudWatchRole.Arn
  ApiGatewayAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      IdentitySource: method.request.header.Authorization
      Name: CognitoUserPoolAuthorizer
      ProviderARNs:
        - !GetAtt CognitoUserPool.Arn
      RestApiId: !Ref ApiGateway
      Type: COGNITO_USER_POOLS
  ApiGatewayCloudWatchRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiGatewayEventsGet
      - ApiGatewayEventsPost
      - ApiGatewayUsageGet
      - ApiGatewayWeeklyEmailsDelete
      - ApiGatewayWeeklyEmailsGet
      - ApiGatewayWeeklyEmailsPost
    Properties:
      RestApiId: !Ref ApiGateway
      StageDescription:
        DataTraceEnabled: true
        LoggingLevel: ERROR
        ThrottlingBurstLimit: 5
        ThrottlingRateLimit: 1
      StageName: prod
  ApiGatewayEventsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: events
      RestApiId: !Ref ApiGateway
  ApiGatewayEventsGet:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiGatewayAuthorizer
      HttpMethod: GET
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaEventsGet.Arn}/invocations"
      ResourceId: !Ref ApiGatewayEventsResource
      RestApiId: !Ref ApiGateway
  ApiGatewayEventsPost:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiGatewayAuthorizer
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaEventsPost.Arn}/invocations"
      ResourceId: !Ref ApiGatewayEventsResource
      RestApiId: !Ref ApiGateway
  ApiGatewayUsageResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: usage
      RestApiId: !Ref ApiGateway
  ApiGatewayUsageGet:
    # checkov:skip=CKV_AWS_59:This endpoint is intentionally open
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaUsageGet.Arn}/invocations"
      ResourceId: !Ref ApiGatewayUsageResource
      RestApiId: !Ref ApiGateway
  ApiGatewayWeeklyEmailsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: weekly-emails
      RestApiId: !Ref ApiGateway
  ApiGatewayWeeklyEmailsDelete:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiGatewayAuthorizer
      HttpMethod: DELETE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaWeeklyEmailsDelete.Arn}/invocations"
      ResourceId: !Ref ApiGatewayWeeklyEmailsResource
      RestApiId: !Ref ApiGateway
  ApiGatewayWeeklyEmailsGet:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiGatewayAuthorizer
      HttpMethod: GET
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaWeeklyEmailsGet.Arn}/invocations"
      ResourceId: !Ref ApiGatewayWeeklyEmailsResource
      RestApiId: !Ref ApiGateway
  ApiGatewayWeeklyEmailsPost:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiGatewayAuthorizer
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaWeeklyEmailsPost.Arn}/invocations"
      ResourceId: !Ref ApiGatewayWeeklyEmailsResource
      RestApiId: !Ref ApiGateway
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      AutoVerifiedAttributes:
        - email
      EmailConfiguration:
        EmailSendingAccount: DEVELOPER
        From: noreply@moodtracker.link
        SourceArn: !Ref SesNoreplyArn
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: true
      UsernameAttributes:
        - email
      UsernameConfiguration:
        CaseSensitive: false
      UserPoolName: moodtracker
      VerificationMessageTemplate:
        DefaultEmailOption: CONFIRM_WITH_LINK
        EmailMessageByLink: |
          Welcome to MoodTracker! You're almost signed up, just {##follow this link to verify your email address##}, then go back to the app and sign in!
        EmailSubjectByLink: MoodTracker email verification
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      PreventUserExistenceErrors: ENABLED
      RefreshTokenValidity: 365 # max value in days
      UserPoolId: !Ref CognitoUserPool
  CognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: moodtracker
      UserPoolId: !Ref CognitoUserPool
  DynamoEventsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: createdAt
          AttributeType: S
        - AttributeName: serverCreatedAt
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: createdAt
          KeyType: RANGE
      LocalSecondaryIndexes:
        - IndexName: serverCreatedAt
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: serverCreatedAt
              KeyType: RANGE
          Projection:
            ProjectionType: "ALL"
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      TableName: moodtracker_events
  DynamoGlobalCacheTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: key
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: key
          KeyType: HASH
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      TableName: moodtracker_global_cache
      TimeToLiveSpecification:
        AttributeName: expiresAt
        Enabled: true
  # Records all users that have signed up to weekly emails
  DynamoWeeklyEmailsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      TableName: moodtracker_weekly_emails
  EventBusWeeklyEmailsRule:
    Type: AWS::Events::Rule
    Properties:
      Name: EventBusWeeklyEmails
      Description: Rule to trigger MoodTracker weekly emails
      ScheduleExpression: cron(0 9 ? * MON *)
      Targets:
        - Arn: !GetAtt LambdaWeeklyEmailsSend.Arn
          Id: LambdaWeeklyEmailsSend
  LambdaWeeklyEmailsSend:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          {{{weekly_emails_send.lambda.py}}}
      FunctionName: MoodTrackerWeeklyEmailsSend
      Handler: index.handler
      ReservedConcurrentExecutions: 1
      Role: !GetAtt LambdaWeeklyEmailsRole.Arn
      Runtime: python3.9
      Timeout: 5
  LambdaWeeklyEmailsSendEventBusPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaWeeklyEmailsSend.Arn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EventBusWeeklyEmailsRule.Arn
  LambdaWeeklyEmailsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: moodtracker_lambda_emails_send_policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action: cognito-idp:ListUsers
                Effect: Allow
                Resource: !GetAtt CognitoUserPool.Arn
              - Action: dynamodb:Scan
                Effect: Allow
                Resource: !GetAtt DynamoWeeklyEmailsTable.Arn
              - Action: ses:SendEmail
                Effect: Allow
                Resource: !Ref SesNoreplyArn
  LambdaEventsGet:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          {{{events_get.lambda.py}}}
      FunctionName: MoodTrackerEventsGet
      Handler: index.handler
      ReservedConcurrentExecutions: !Ref ApiReservedConcurrentExecutions
      Role: !GetAtt LambdaEventsGetRole.Arn
      Runtime: python3.9
  LambdaEventsGetPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaEventsGet.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*"
  LambdaEventsGetRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: moodtracker_lambda_events_get_policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action: dynamodb:Query
                Effect: Allow
                Resource:
                  - !GetAtt DynamoEventsTable.Arn
                  - !Sub "${DynamoEventsTable.Arn}/index/serverCreatedAt"
  LambdaEventsPost:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          {{{events_post.lambda.py}}}
      FunctionName: MoodTrackerEventsPost
      Handler: index.handler
      ReservedConcurrentExecutions: !Ref ApiReservedConcurrentExecutions
      Role: !GetAtt LambdaEventsPostRole.Arn
      Runtime: python3.9
  LambdaEventsPostPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaEventsPost.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*"
  LambdaEventsPostRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: moodtracker_lambda_events_post_policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action: dynamodb:BatchWriteItem
                Effect: Allow
                Resource: !GetAtt DynamoEventsTable.Arn
  LambdaUsageGet:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          {{{usage_get.lambda.py}}}
      FunctionName: MoodTrackerUsageGet
      Handler: index.handler
      ReservedConcurrentExecutions: !Ref ApiReservedConcurrentExecutions
      Role: !GetAtt LambdaUsageGetRole.Arn
      Runtime: python3.9
  LambdaUsageGetPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaUsageGet.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*"
  LambdaUsageGetRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: moodtracker_lambda_usage_get_policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action: cognito-idp:ListUsers
                Effect: Allow
                Resource: !GetAtt CognitoUserPool.Arn
              - Action: dynamodb:DescribeTable
                Effect: Allow
                Resource: !GetAtt DynamoWeeklyEmailsTable.Arn
              - Action: dynamodb:GetItem
                Effect: Allow
                Resource: !GetAtt DynamoGlobalCacheTable.Arn
              - Action: dynamodb:PutItem
                Effect: Allow
                Resource: !GetAtt DynamoGlobalCacheTable.Arn
              - Action: dynamodb:Scan
                Effect: Allow
                Resource: !GetAtt DynamoEventsTable.Arn
  LambdaWeeklyEmailsDelete:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          {{{weekly_emails_delete.lambda.py}}}
      FunctionName: MoodTrackerWeeklyEmailsDelete
      Handler: index.handler
      ReservedConcurrentExecutions: !Ref ApiReservedConcurrentExecutions
      Role: !GetAtt LambdaWeeklyEmailsDeleteRole.Arn
      Runtime: python3.9
  LambdaWeeklyEmailsDeletePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaWeeklyEmailsDelete.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*"
  LambdaWeeklyEmailsDeleteRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: moodtracker_lambda_weekly_emails_delete_policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action: dynamodb:DeleteItem
                Effect: Allow
                Resource: !GetAtt DynamoWeeklyEmailsTable.Arn
  LambdaWeeklyEmailsGet:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          {{{weekly_emails_get.lambda.py}}}
      FunctionName: MoodTrackerWeeklyEmailsGet
      Handler: index.handler
      ReservedConcurrentExecutions: !Ref ApiReservedConcurrentExecutions
      Role: !GetAtt LambdaWeeklyEmailsGetRole.Arn
      Runtime: python3.9
  LambdaWeeklyEmailsGetPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaWeeklyEmailsGet.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*"
  LambdaWeeklyEmailsGetRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: moodtracker_lambda_weekly_emails_get_policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action: dynamodb:GetItem
                Effect: Allow
                Resource: !GetAtt DynamoWeeklyEmailsTable.Arn
  LambdaWeeklyEmailsPost:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          {{{weekly_emails_post.lambda.py}}}
      FunctionName: MoodTrackerWeeklyEmailsPost
      Handler: index.handler
      ReservedConcurrentExecutions: !Ref ApiReservedConcurrentExecutions
      Role: !GetAtt LambdaWeeklyEmailsPostRole.Arn
      Runtime: python3.9
  LambdaWeeklyEmailsPostPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaWeeklyEmailsPost.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*"
  LambdaWeeklyEmailsPostRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: moodtracker_lambda_weekly_emails_post_policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action: dynamodb:PutItem
                Effect: Allow
                Resource: !GetAtt DynamoWeeklyEmailsTable.Arn
  SesReceiptRule:
    Type: "AWS::SES::ReceiptRule"
    Properties:
      Rule:
        Actions:
          - SNSAction:
              TopicArn: !Ref SnsTopicEmails
        Enabled: true
        Name: moodtracker.link-emails-to-sns
        Recipients:
          - noreply@moodtracker.link
        ScanEnabled: true
      RuleSetName: default-rule-set
  SnsTopicEmails:
    # checkov:skip=CKV_AWS_26:Encryption at rest is not deemed as necessary for this queue as it is for a noreply address and should not receive any email
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: "{{resolve:secretsmanager:MoodTrackerSecrets:SecretString:SnsEmailAddress}}"
          Protocol: EMAIL
      TopicName: moodtracker-emails
